// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createWalletStmt, err = db.PrepareContext(ctx, createWallet); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWallet: %w", err)
	}
	if q.deleteTransactionStmt, err = db.PrepareContext(ctx, deleteTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransaction: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteWalletStmt, err = db.PrepareContext(ctx, deleteWallet); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWallet: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getWalletStmt, err = db.PrepareContext(ctx, getWallet); err != nil {
		return nil, fmt.Errorf("error preparing query GetWallet: %w", err)
	}
	if q.listTransactionStmt, err = db.PrepareContext(ctx, listTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransaction: %w", err)
	}
	if q.listUserStmt, err = db.PrepareContext(ctx, listUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListUser: %w", err)
	}
	if q.listWalletStmt, err = db.PrepareContext(ctx, listWallet); err != nil {
		return nil, fmt.Errorf("error preparing query ListWallet: %w", err)
	}
	if q.updateUserNameStmt, err = db.PrepareContext(ctx, updateUserName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserName: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateWalletStmt, err = db.PrepareContext(ctx, updateWallet); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWallet: %w", err)
	}
	if q.lockWalletsForUpdateStmt, err = db.PrepareContext(ctx, lockWalletsForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query lockWalletsForUpdate: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createWalletStmt != nil {
		if cerr := q.createWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWalletStmt: %w", cerr)
		}
	}
	if q.deleteTransactionStmt != nil {
		if cerr := q.deleteTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransactionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteWalletStmt != nil {
		if cerr := q.deleteWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWalletStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getWalletStmt != nil {
		if cerr := q.getWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWalletStmt: %w", cerr)
		}
	}
	if q.listTransactionStmt != nil {
		if cerr := q.listTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionStmt: %w", cerr)
		}
	}
	if q.listUserStmt != nil {
		if cerr := q.listUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserStmt: %w", cerr)
		}
	}
	if q.listWalletStmt != nil {
		if cerr := q.listWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWalletStmt: %w", cerr)
		}
	}
	if q.updateUserNameStmt != nil {
		if cerr := q.updateUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserNameStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateWalletStmt != nil {
		if cerr := q.updateWalletStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWalletStmt: %w", cerr)
		}
	}
	if q.lockWalletsForUpdateStmt != nil {
		if cerr := q.lockWalletsForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lockWalletsForUpdateStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createTransactionStmt    *sql.Stmt
	createUserStmt           *sql.Stmt
	createWalletStmt         *sql.Stmt
	deleteTransactionStmt    *sql.Stmt
	deleteUserStmt           *sql.Stmt
	deleteWalletStmt         *sql.Stmt
	getTransactionStmt       *sql.Stmt
	getUserStmt              *sql.Stmt
	getWalletStmt            *sql.Stmt
	listTransactionStmt      *sql.Stmt
	listUserStmt             *sql.Stmt
	listWalletStmt           *sql.Stmt
	updateUserNameStmt       *sql.Stmt
	updateUserPasswordStmt   *sql.Stmt
	updateWalletStmt         *sql.Stmt
	lockWalletsForUpdateStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createTransactionStmt:    q.createTransactionStmt,
		createUserStmt:           q.createUserStmt,
		createWalletStmt:         q.createWalletStmt,
		deleteTransactionStmt:    q.deleteTransactionStmt,
		deleteUserStmt:           q.deleteUserStmt,
		deleteWalletStmt:         q.deleteWalletStmt,
		getTransactionStmt:       q.getTransactionStmt,
		getUserStmt:              q.getUserStmt,
		getWalletStmt:            q.getWalletStmt,
		listTransactionStmt:      q.listTransactionStmt,
		listUserStmt:             q.listUserStmt,
		listWalletStmt:           q.listWalletStmt,
		updateUserNameStmt:       q.updateUserNameStmt,
		updateUserPasswordStmt:   q.updateUserPasswordStmt,
		updateWalletStmt:         q.updateWalletStmt,
		lockWalletsForUpdateStmt: q.lockWalletsForUpdateStmt,
	}
}
