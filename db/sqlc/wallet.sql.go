// Code generated by sqlc. DO NOT EDIT.
// source: wallet.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
  owner, currency, balance 
) VALUES (
  $1, $2, $3
) RETURNING id, owner, currency, balance, created_at, updated_at
`

type CreateWalletParams struct {
	Owner    int64    `json:"owner"`
	Currency Currency `json:"currency"`
	Balance  int64    `json:"balance"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.queryRow(ctx, q.createWalletStmt, createWallet, arg.Owner, arg.Currency, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteWalletStmt, deleteWallet, id)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT id, owner, currency, balance, created_at, updated_at FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int64) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletStmt, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Currency,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWallet = `-- name: ListWallet :many
SELECT id, owner, currency, balance, created_at, updated_at FROM wallets
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListWalletParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWallet(ctx context.Context, arg ListWalletParams) ([]Wallet, error) {
	rows, err := q.query(ctx, q.listWalletStmt, listWallet, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Currency,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWallet = `-- name: UpdateWallet :exec
Update wallets
SET balance = balance + $1, updated_at = now()
WHERE id = $2
`

type UpdateWalletParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) error {
	_, err := q.exec(ctx, q.updateWalletStmt, updateWallet, arg.Amount, arg.ID)
	return err
}

const lockWalletsForUpdate = `-- name: lockWalletsForUpdate :many
SELECT id, owner, currency, balance, created_at, updated_at FROM wallets
WHERE id = ANY($1::bigint[]) LIMIT 2
For NO KEY UPDATE
`

func (q *Queries) lockWalletsForUpdate(ctx context.Context, ids []int64) ([]Wallet, error) {
	rows, err := q.query(ctx, q.lockWalletsForUpdateStmt, lockWalletsForUpdate, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Currency,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
